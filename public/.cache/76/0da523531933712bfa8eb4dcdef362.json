{"id":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","dependencies":[{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\package.json","includedInParent":true,"mtime":1608920885483},{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1607631999279},{"name":"../internals/an-object","loc":{"line":1,"column":23},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\core-js\\internals\\an-object.js"},{"name":"../internals/iterator-close","loc":{"line":2,"column":28},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\core-js\\internals\\iterator-close.js"}],"generated":{"js":"var anObject = require('../internals/an-object');\r\nvar iteratorClose = require('../internals/iterator-close');\r\n\r\n// call something on iterator step with safe closing on error\r\nmodule.exports = function (iterator, fn, value, ENTRIES) {\r\n  try {\r\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\r\n  // 7.4.6 IteratorClose(iterator, completion)\r\n  } catch (error) {\r\n    iteratorClose(iterator);\r\n    throw error;\r\n  }\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}}],"sources":{"../node_modules/core-js/internals/call-with-safe-iteration-closing.js":"var anObject = require('../internals/an-object');\r\nvar iteratorClose = require('../internals/iterator-close');\r\n\r\n// call something on iterator step with safe closing on error\r\nmodule.exports = function (iterator, fn, value, ENTRIES) {\r\n  try {\r\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\r\n  // 7.4.6 IteratorClose(iterator, completion)\r\n  } catch (error) {\r\n    iteratorClose(iterator);\r\n    throw error;\r\n  }\r\n};\r\n"},"lineCount":14}},"error":null,"hash":"ab8a63fbb8a295ee78e27b7eda0bf922","cacheData":{"env":{}}}
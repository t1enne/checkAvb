{"id":"../node_modules/mithril/pathname/compileTemplate.js","dependencies":[{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\package.json","includedInParent":true,"mtime":1608226545980},{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\mithril\\package.json","includedInParent":true,"mtime":1607632000077},{"name":"./parse","loc":{"line":3,"column":28},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\mithril\\pathname\\compileTemplate.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\mithril\\pathname\\parse.js"}],"generated":{"js":"\"use strict\"\r\n\r\nvar parsePathname = require(\"./parse\")\r\n\r\n// Compiles a template into a function that takes a resolved path (without query\r\n// strings) and returns an object containing the template parameters with their\r\n// parsed values. This expects the input of the compiled template to be the\r\n// output of `parsePathname`. Note that it does *not* remove query parameters\r\n// specified in the template.\r\nmodule.exports = function(template) {\r\n\tvar templateData = parsePathname(template)\r\n\tvar templateKeys = Object.keys(templateData.params)\r\n\tvar keys = []\r\n\tvar regexp = new RegExp(\"^\" + templateData.path.replace(\r\n\t\t// I escape literal text so people can use things like `:file.:ext` or\r\n\t\t// `:lang-:locale` in routes. This is all merged into one pass so I\r\n\t\t// don't also accidentally escape `-` and make it harder to detect it to\r\n\t\t// ban it from template parameters.\r\n\t\t/:([^\\/.-]+)(\\.{3}|\\.(?!\\.)|-)?|[\\\\^$*+.()|\\[\\]{}]/g,\r\n\t\tfunction(m, key, extra) {\r\n\t\t\tif (key == null) return \"\\\\\" + m\r\n\t\t\tkeys.push({k: key, r: extra === \"...\"})\r\n\t\t\tif (extra === \"...\") return \"(.*)\"\r\n\t\t\tif (extra === \".\") return \"([^/]+)\\\\.\"\r\n\t\t\treturn \"([^/]+)\" + (extra || \"\")\r\n\t\t}\r\n\t) + \"$\")\r\n\treturn function(data) {\r\n\t\t// First, check the params. Usually, there isn't any, and it's just\r\n\t\t// checking a static set.\r\n\t\tfor (var i = 0; i < templateKeys.length; i++) {\r\n\t\t\tif (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false\r\n\t\t}\r\n\t\t// If no interpolations exist, let's skip all the ceremony\r\n\t\tif (!keys.length) return regexp.test(data.path)\r\n\t\tvar values = regexp.exec(data.path)\r\n\t\tif (values == null) return false\r\n\t\tfor (var i = 0; i < keys.length; i++) {\r\n\t\t\tdata.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1])\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mithril/pathname/compileTemplate.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"../node_modules/mithril/pathname/compileTemplate.js":"\"use strict\"\r\n\r\nvar parsePathname = require(\"./parse\")\r\n\r\n// Compiles a template into a function that takes a resolved path (without query\r\n// strings) and returns an object containing the template parameters with their\r\n// parsed values. This expects the input of the compiled template to be the\r\n// output of `parsePathname`. Note that it does *not* remove query parameters\r\n// specified in the template.\r\nmodule.exports = function(template) {\r\n\tvar templateData = parsePathname(template)\r\n\tvar templateKeys = Object.keys(templateData.params)\r\n\tvar keys = []\r\n\tvar regexp = new RegExp(\"^\" + templateData.path.replace(\r\n\t\t// I escape literal text so people can use things like `:file.:ext` or\r\n\t\t// `:lang-:locale` in routes. This is all merged into one pass so I\r\n\t\t// don't also accidentally escape `-` and make it harder to detect it to\r\n\t\t// ban it from template parameters.\r\n\t\t/:([^\\/.-]+)(\\.{3}|\\.(?!\\.)|-)?|[\\\\^$*+.()|\\[\\]{}]/g,\r\n\t\tfunction(m, key, extra) {\r\n\t\t\tif (key == null) return \"\\\\\" + m\r\n\t\t\tkeys.push({k: key, r: extra === \"...\"})\r\n\t\t\tif (extra === \"...\") return \"(.*)\"\r\n\t\t\tif (extra === \".\") return \"([^/]+)\\\\.\"\r\n\t\t\treturn \"([^/]+)\" + (extra || \"\")\r\n\t\t}\r\n\t) + \"$\")\r\n\treturn function(data) {\r\n\t\t// First, check the params. Usually, there isn't any, and it's just\r\n\t\t// checking a static set.\r\n\t\tfor (var i = 0; i < templateKeys.length; i++) {\r\n\t\t\tif (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false\r\n\t\t}\r\n\t\t// If no interpolations exist, let's skip all the ceremony\r\n\t\tif (!keys.length) return regexp.test(data.path)\r\n\t\tvar values = regexp.exec(data.path)\r\n\t\tif (values == null) return false\r\n\t\tfor (var i = 0; i < keys.length; i++) {\r\n\t\t\tdata.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1])\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n}\r\n"},"lineCount":44}},"error":null,"hash":"f94ff27c3777730f8627c552dba3e43f","cacheData":{"env":{}}}
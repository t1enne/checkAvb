{"id":"node_modules/lodash/_composeArgsRight.js","dependencies":[{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\package.json","includedInParent":true,"mtime":1602529800556},{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1602527410817}],"generated":{"js":"/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMax = Math.max;\r\n\r\n/**\r\n * This function is like `composeArgs` except that the arguments composition\r\n * is tailored for `_.partialRight`.\r\n *\r\n * @private\r\n * @param {Array} args The provided arguments.\r\n * @param {Array} partials The arguments to append to those provided.\r\n * @param {Array} holders The `partials` placeholder indexes.\r\n * @params {boolean} [isCurried] Specify composing for a curried function.\r\n * @returns {Array} Returns the new array of composed arguments.\r\n */\r\nfunction composeArgsRight(args, partials, holders, isCurried) {\r\n  var argsIndex = -1,\r\n      argsLength = args.length,\r\n      holdersIndex = -1,\r\n      holdersLength = holders.length,\r\n      rightIndex = -1,\r\n      rightLength = partials.length,\r\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n      result = Array(rangeLength + rightLength),\r\n      isUncurried = !isCurried;\r\n\r\n  while (++argsIndex < rangeLength) {\r\n    result[argsIndex] = args[argsIndex];\r\n  }\r\n  var offset = argsIndex;\r\n  while (++rightIndex < rightLength) {\r\n    result[offset + rightIndex] = partials[rightIndex];\r\n  }\r\n  while (++holdersIndex < holdersLength) {\r\n    if (isUncurried || argsIndex < argsLength) {\r\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = composeArgsRight;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/lodash/_composeArgsRight.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"node_modules/lodash/_composeArgsRight.js":"/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMax = Math.max;\r\n\r\n/**\r\n * This function is like `composeArgs` except that the arguments composition\r\n * is tailored for `_.partialRight`.\r\n *\r\n * @private\r\n * @param {Array} args The provided arguments.\r\n * @param {Array} partials The arguments to append to those provided.\r\n * @param {Array} holders The `partials` placeholder indexes.\r\n * @params {boolean} [isCurried] Specify composing for a curried function.\r\n * @returns {Array} Returns the new array of composed arguments.\r\n */\r\nfunction composeArgsRight(args, partials, holders, isCurried) {\r\n  var argsIndex = -1,\r\n      argsLength = args.length,\r\n      holdersIndex = -1,\r\n      holdersLength = holders.length,\r\n      rightIndex = -1,\r\n      rightLength = partials.length,\r\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n      result = Array(rangeLength + rightLength),\r\n      isUncurried = !isCurried;\r\n\r\n  while (++argsIndex < rangeLength) {\r\n    result[argsIndex] = args[argsIndex];\r\n  }\r\n  var offset = argsIndex;\r\n  while (++rightIndex < rightLength) {\r\n    result[offset + rightIndex] = partials[rightIndex];\r\n  }\r\n  while (++holdersIndex < holdersLength) {\r\n    if (isUncurried || argsIndex < argsLength) {\r\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = composeArgsRight;\r\n"},"lineCount":42}},"error":null,"hash":"8b1f673de7cd2e26ae780f2ba19823d4","cacheData":{"env":{}}}
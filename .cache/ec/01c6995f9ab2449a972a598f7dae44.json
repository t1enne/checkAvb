{"id":"node_modules/path-to-regexp/index.js","dependencies":[{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\package.json","includedInParent":true,"mtime":1602529800556},{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\path-to-regexp\\package.json","includedInParent":true,"mtime":1602527411080}],"generated":{"js":"/**\r\n * Expose `pathtoRegexp`.\r\n */\r\n\r\nmodule.exports = pathtoRegexp;\r\n\r\n/**\r\n * Match matching groups in a regular expression.\r\n */\r\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\r\n\r\n/**\r\n * Normalize the given path string,\r\n * returning a regular expression.\r\n *\r\n * An empty array should be passed,\r\n * which will contain the placeholder\r\n * key names. For example \"/user/:id\" will\r\n * then contain [\"id\"].\r\n *\r\n * @param  {String|RegExp|Array} path\r\n * @param  {Array} keys\r\n * @param  {Object} options\r\n * @return {RegExp}\r\n * @api private\r\n */\r\n\r\nfunction pathtoRegexp(path, keys, options) {\r\n  options = options || {};\r\n  keys = keys || [];\r\n  var strict = options.strict;\r\n  var end = options.end !== false;\r\n  var flags = options.sensitive ? '' : 'i';\r\n  var extraOffset = 0;\r\n  var keysOffset = keys.length;\r\n  var i = 0;\r\n  var name = 0;\r\n  var m;\r\n\r\n  if (path instanceof RegExp) {\r\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\r\n      keys.push({\r\n        name: name++,\r\n        optional: false,\r\n        offset: m.index\r\n      });\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  if (Array.isArray(path)) {\r\n    // Map array parts into regexps and return their source. We also pass\r\n    // the same keys and options instance into every generation to get\r\n    // consistent matching groups before we join the sources together.\r\n    path = path.map(function (value) {\r\n      return pathtoRegexp(value, keys, options).source;\r\n    });\r\n\r\n    return new RegExp('(?:' + path.join('|') + ')', flags);\r\n  }\r\n\r\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\r\n    .replace(/\\/\\(/g, '/(?:')\r\n    .replace(/([\\/\\.])/g, '\\\\$1')\r\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\r\n      slash = slash || '';\r\n      format = format || '';\r\n      capture = capture || '([^\\\\/' + format + ']+?)';\r\n      optional = optional || '';\r\n\r\n      keys.push({\r\n        name: key,\r\n        optional: !!optional,\r\n        offset: offset + extraOffset\r\n      });\r\n\r\n      var result = ''\r\n        + (optional ? '' : slash)\r\n        + '(?:'\r\n        + format + (optional ? slash : '') + capture\r\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\r\n        + ')'\r\n        + optional;\r\n\r\n      extraOffset += result.length - match.length;\r\n\r\n      return result;\r\n    })\r\n    .replace(/\\*/g, function (star, index) {\r\n      var len = keys.length\r\n\r\n      while (len-- > keysOffset && keys[len].offset > index) {\r\n        keys[len].offset += 3; // Replacement length minus asterisk length.\r\n      }\r\n\r\n      return '(.*)';\r\n    });\r\n\r\n  // This is a workaround for handling unnamed matching groups.\r\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\r\n    var escapeCount = 0;\r\n    var index = m.index;\r\n\r\n    while (path.charAt(--index) === '\\\\') {\r\n      escapeCount++;\r\n    }\r\n\r\n    // It's possible to escape the bracket.\r\n    if (escapeCount % 2 === 1) {\r\n      continue;\r\n    }\r\n\r\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\r\n      keys.splice(keysOffset + i, 0, {\r\n        name: name++, // Unnamed matching groups must be consistently linear.\r\n        optional: false,\r\n        offset: m.index\r\n      });\r\n    }\r\n\r\n    i++;\r\n  }\r\n\r\n  // If the path is non-ending, match until the end or a slash.\r\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\r\n\r\n  return new RegExp(path, flags);\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/path-to-regexp/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/path-to-regexp/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}}],"sources":{"node_modules/path-to-regexp/index.js":"/**\r\n * Expose `pathtoRegexp`.\r\n */\r\n\r\nmodule.exports = pathtoRegexp;\r\n\r\n/**\r\n * Match matching groups in a regular expression.\r\n */\r\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\r\n\r\n/**\r\n * Normalize the given path string,\r\n * returning a regular expression.\r\n *\r\n * An empty array should be passed,\r\n * which will contain the placeholder\r\n * key names. For example \"/user/:id\" will\r\n * then contain [\"id\"].\r\n *\r\n * @param  {String|RegExp|Array} path\r\n * @param  {Array} keys\r\n * @param  {Object} options\r\n * @return {RegExp}\r\n * @api private\r\n */\r\n\r\nfunction pathtoRegexp(path, keys, options) {\r\n  options = options || {};\r\n  keys = keys || [];\r\n  var strict = options.strict;\r\n  var end = options.end !== false;\r\n  var flags = options.sensitive ? '' : 'i';\r\n  var extraOffset = 0;\r\n  var keysOffset = keys.length;\r\n  var i = 0;\r\n  var name = 0;\r\n  var m;\r\n\r\n  if (path instanceof RegExp) {\r\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\r\n      keys.push({\r\n        name: name++,\r\n        optional: false,\r\n        offset: m.index\r\n      });\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  if (Array.isArray(path)) {\r\n    // Map array parts into regexps and return their source. We also pass\r\n    // the same keys and options instance into every generation to get\r\n    // consistent matching groups before we join the sources together.\r\n    path = path.map(function (value) {\r\n      return pathtoRegexp(value, keys, options).source;\r\n    });\r\n\r\n    return new RegExp('(?:' + path.join('|') + ')', flags);\r\n  }\r\n\r\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\r\n    .replace(/\\/\\(/g, '/(?:')\r\n    .replace(/([\\/\\.])/g, '\\\\$1')\r\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\r\n      slash = slash || '';\r\n      format = format || '';\r\n      capture = capture || '([^\\\\/' + format + ']+?)';\r\n      optional = optional || '';\r\n\r\n      keys.push({\r\n        name: key,\r\n        optional: !!optional,\r\n        offset: offset + extraOffset\r\n      });\r\n\r\n      var result = ''\r\n        + (optional ? '' : slash)\r\n        + '(?:'\r\n        + format + (optional ? slash : '') + capture\r\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\r\n        + ')'\r\n        + optional;\r\n\r\n      extraOffset += result.length - match.length;\r\n\r\n      return result;\r\n    })\r\n    .replace(/\\*/g, function (star, index) {\r\n      var len = keys.length\r\n\r\n      while (len-- > keysOffset && keys[len].offset > index) {\r\n        keys[len].offset += 3; // Replacement length minus asterisk length.\r\n      }\r\n\r\n      return '(.*)';\r\n    });\r\n\r\n  // This is a workaround for handling unnamed matching groups.\r\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\r\n    var escapeCount = 0;\r\n    var index = m.index;\r\n\r\n    while (path.charAt(--index) === '\\\\') {\r\n      escapeCount++;\r\n    }\r\n\r\n    // It's possible to escape the bracket.\r\n    if (escapeCount % 2 === 1) {\r\n      continue;\r\n    }\r\n\r\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\r\n      keys.splice(keysOffset + i, 0, {\r\n        name: name++, // Unnamed matching groups must be consistently linear.\r\n        optional: false,\r\n        offset: m.index\r\n      });\r\n    }\r\n\r\n    i++;\r\n  }\r\n\r\n  // If the path is non-ending, match until the end or a slash.\r\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\r\n\r\n  return new RegExp(path, flags);\r\n};\r\n"},"lineCount":130}},"error":null,"hash":"2a0e9e4db96d1bc44f7fd4e1b5cffb43","cacheData":{"env":{}}}
{"id":"node_modules/lodash/reduce.js","dependencies":[{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\package.json","includedInParent":true,"mtime":1602529800556},{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1602527410817},{"name":"./_arrayReduce","loc":{"line":1,"column":26},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\reduce.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_arrayReduce.js"},{"name":"./_baseEach","loc":{"line":2,"column":23},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\reduce.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_baseEach.js"},{"name":"./_baseIteratee","loc":{"line":3,"column":27},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\reduce.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_baseIteratee.js"},{"name":"./_baseReduce","loc":{"line":4,"column":25},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\reduce.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_baseReduce.js"},{"name":"./isArray","loc":{"line":5,"column":22},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\reduce.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\isArray.js"}],"generated":{"js":"var arrayReduce = require('./_arrayReduce'),\r\n    baseEach = require('./_baseEach'),\r\n    baseIteratee = require('./_baseIteratee'),\r\n    baseReduce = require('./_baseReduce'),\r\n    isArray = require('./isArray');\r\n\r\n/**\r\n * Reduces `collection` to a value which is the accumulated result of running\r\n * each element in `collection` thru `iteratee`, where each successive\r\n * invocation is supplied the return value of the previous. If `accumulator`\r\n * is not given, the first element of `collection` is used as the initial\r\n * value. The iteratee is invoked with four arguments:\r\n * (accumulator, value, index|key, collection).\r\n *\r\n * Many lodash methods are guarded to work as iteratees for methods like\r\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\r\n *\r\n * The guarded methods are:\r\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\r\n * and `sortBy`\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Collection\r\n * @param {Array|Object} collection The collection to iterate over.\r\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n * @param {*} [accumulator] The initial value.\r\n * @returns {*} Returns the accumulated value.\r\n * @see _.reduceRight\r\n * @example\r\n *\r\n * _.reduce([1, 2], function(sum, n) {\r\n *   return sum + n;\r\n * }, 0);\r\n * // => 3\r\n *\r\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n *   (result[value] || (result[value] = [])).push(key);\r\n *   return result;\r\n * }, {});\r\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\r\n */\r\nfunction reduce(collection, iteratee, accumulator) {\r\n  var func = isArray(collection) ? arrayReduce : baseReduce,\r\n      initAccum = arguments.length < 3;\r\n\r\n  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\r\n}\r\n\r\nmodule.exports = reduce;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/lodash/reduce.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"node_modules/lodash/reduce.js":"var arrayReduce = require('./_arrayReduce'),\r\n    baseEach = require('./_baseEach'),\r\n    baseIteratee = require('./_baseIteratee'),\r\n    baseReduce = require('./_baseReduce'),\r\n    isArray = require('./isArray');\r\n\r\n/**\r\n * Reduces `collection` to a value which is the accumulated result of running\r\n * each element in `collection` thru `iteratee`, where each successive\r\n * invocation is supplied the return value of the previous. If `accumulator`\r\n * is not given, the first element of `collection` is used as the initial\r\n * value. The iteratee is invoked with four arguments:\r\n * (accumulator, value, index|key, collection).\r\n *\r\n * Many lodash methods are guarded to work as iteratees for methods like\r\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\r\n *\r\n * The guarded methods are:\r\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\r\n * and `sortBy`\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Collection\r\n * @param {Array|Object} collection The collection to iterate over.\r\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n * @param {*} [accumulator] The initial value.\r\n * @returns {*} Returns the accumulated value.\r\n * @see _.reduceRight\r\n * @example\r\n *\r\n * _.reduce([1, 2], function(sum, n) {\r\n *   return sum + n;\r\n * }, 0);\r\n * // => 3\r\n *\r\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n *   (result[value] || (result[value] = [])).push(key);\r\n *   return result;\r\n * }, {});\r\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\r\n */\r\nfunction reduce(collection, iteratee, accumulator) {\r\n  var func = isArray(collection) ? arrayReduce : baseReduce,\r\n      initAccum = arguments.length < 3;\r\n\r\n  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\r\n}\r\n\r\nmodule.exports = reduce;\r\n"},"lineCount":52}},"error":null,"hash":"6644db0e0c8042ddce98dff139a48f09","cacheData":{"env":{}}}
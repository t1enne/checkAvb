{"id":"../node_modules/mithril/pathname/build.js","dependencies":[{"name":"/home/ntaov/Documents/code/checkAvb/package.json","includedInParent":true,"mtime":1615494740788},{"name":"/home/ntaov/Documents/code/checkAvb/node_modules/mithril/package.json","includedInParent":true,"mtime":1615490068357},{"name":"../querystring/build","loc":{"line":3,"column":31},"parent":"/home/ntaov/Documents/code/checkAvb/node_modules/mithril/pathname/build.js","resolved":"/home/ntaov/Documents/code/checkAvb/node_modules/mithril/querystring/build.js"},{"name":"./assign","loc":{"line":4,"column":21},"parent":"/home/ntaov/Documents/code/checkAvb/node_modules/mithril/pathname/build.js","resolved":"/home/ntaov/Documents/code/checkAvb/node_modules/mithril/pathname/assign.js"}],"generated":{"js":"\"use strict\"\n\nvar buildQueryString = require(\"../querystring/build\")\nvar assign = require(\"./assign\")\n\n// Returns `path` from `template` + `params`\nmodule.exports = function(template, params) {\n\tif ((/:([^\\/\\.-]+)(\\.{3})?:/).test(template)) {\n\t\tthrow new SyntaxError(\"Template parameter names *must* be separated\")\n\t}\n\tif (params == null) return template\n\tvar queryIndex = template.indexOf(\"?\")\n\tvar hashIndex = template.indexOf(\"#\")\n\tvar queryEnd = hashIndex < 0 ? template.length : hashIndex\n\tvar pathEnd = queryIndex < 0 ? queryEnd : queryIndex\n\tvar path = template.slice(0, pathEnd)\n\tvar query = {}\n\n\tassign(query, params)\n\n\tvar resolved = path.replace(/:([^\\/\\.-]+)(\\.{3})?/g, function(m, key, variadic) {\n\t\tdelete query[key]\n\t\t// If no such parameter exists, don't interpolate it.\n\t\tif (params[key] == null) return m\n\t\t// Escape normal parameters, but not variadic ones.\n\t\treturn variadic ? params[key] : encodeURIComponent(String(params[key]))\n\t})\n\n\t// In case the template substitution adds new query/hash parameters.\n\tvar newQueryIndex = resolved.indexOf(\"?\")\n\tvar newHashIndex = resolved.indexOf(\"#\")\n\tvar newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex\n\tvar newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex\n\tvar result = resolved.slice(0, newPathEnd)\n\n\tif (queryIndex >= 0) result += template.slice(queryIndex, queryEnd)\n\tif (newQueryIndex >= 0) result += (queryIndex < 0 ? \"?\" : \"&\") + resolved.slice(newQueryIndex, newQueryEnd)\n\tvar querystring = buildQueryString(query)\n\tif (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? \"?\" : \"&\") + querystring\n\tif (hashIndex >= 0) result += template.slice(hashIndex)\n\tif (newHashIndex >= 0) result += (hashIndex < 0 ? \"\" : \"&\") + resolved.slice(newHashIndex)\n\treturn result\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mithril/pathname/build.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mithril/pathname/build.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"../node_modules/mithril/pathname/build.js":"\"use strict\"\n\nvar buildQueryString = require(\"../querystring/build\")\nvar assign = require(\"./assign\")\n\n// Returns `path` from `template` + `params`\nmodule.exports = function(template, params) {\n\tif ((/:([^\\/\\.-]+)(\\.{3})?:/).test(template)) {\n\t\tthrow new SyntaxError(\"Template parameter names *must* be separated\")\n\t}\n\tif (params == null) return template\n\tvar queryIndex = template.indexOf(\"?\")\n\tvar hashIndex = template.indexOf(\"#\")\n\tvar queryEnd = hashIndex < 0 ? template.length : hashIndex\n\tvar pathEnd = queryIndex < 0 ? queryEnd : queryIndex\n\tvar path = template.slice(0, pathEnd)\n\tvar query = {}\n\n\tassign(query, params)\n\n\tvar resolved = path.replace(/:([^\\/\\.-]+)(\\.{3})?/g, function(m, key, variadic) {\n\t\tdelete query[key]\n\t\t// If no such parameter exists, don't interpolate it.\n\t\tif (params[key] == null) return m\n\t\t// Escape normal parameters, but not variadic ones.\n\t\treturn variadic ? params[key] : encodeURIComponent(String(params[key]))\n\t})\n\n\t// In case the template substitution adds new query/hash parameters.\n\tvar newQueryIndex = resolved.indexOf(\"?\")\n\tvar newHashIndex = resolved.indexOf(\"#\")\n\tvar newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex\n\tvar newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex\n\tvar result = resolved.slice(0, newPathEnd)\n\n\tif (queryIndex >= 0) result += template.slice(queryIndex, queryEnd)\n\tif (newQueryIndex >= 0) result += (queryIndex < 0 ? \"?\" : \"&\") + resolved.slice(newQueryIndex, newQueryEnd)\n\tvar querystring = buildQueryString(query)\n\tif (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? \"?\" : \"&\") + querystring\n\tif (hashIndex >= 0) result += template.slice(hashIndex)\n\tif (newHashIndex >= 0) result += (hashIndex < 0 ? \"\" : \"&\") + resolved.slice(newHashIndex)\n\treturn result\n}\n"},"lineCount":44}},"error":null,"hash":"1f04b129a73f22e812406bd460abd15e","cacheData":{"env":{}}}
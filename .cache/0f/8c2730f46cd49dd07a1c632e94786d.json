{"id":"node_modules/lodash/_mergeData.js","dependencies":[{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\package.json","includedInParent":true,"mtime":1602529800556},{"name":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1602527410817},{"name":"./_composeArgs","loc":{"line":1,"column":26},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_mergeData.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_composeArgs.js"},{"name":"./_composeArgsRight","loc":{"line":2,"column":31},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_mergeData.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_composeArgsRight.js"},{"name":"./_replaceHolders","loc":{"line":3,"column":29},"parent":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_mergeData.js","resolved":"C:\\Users\\990555\\Desktop\\tornado\\checkAvb\\node_modules\\lodash\\_replaceHolders.js"}],"generated":{"js":"var composeArgs = require('./_composeArgs'),\r\n    composeArgsRight = require('./_composeArgsRight'),\r\n    replaceHolders = require('./_replaceHolders');\r\n\r\n/** Used as the internal argument placeholder. */\r\nvar PLACEHOLDER = '__lodash_placeholder__';\r\n\r\n/** Used to compose bitmasks for function metadata. */\r\nvar WRAP_BIND_FLAG = 1,\r\n    WRAP_BIND_KEY_FLAG = 2,\r\n    WRAP_CURRY_BOUND_FLAG = 4,\r\n    WRAP_CURRY_FLAG = 8,\r\n    WRAP_ARY_FLAG = 128,\r\n    WRAP_REARG_FLAG = 256;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMin = Math.min;\r\n\r\n/**\r\n * Merges the function metadata of `source` into `data`.\r\n *\r\n * Merging metadata reduces the number of wrappers used to invoke a function.\r\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\r\n * may be applied regardless of execution order. Methods like `_.ary` and\r\n * `_.rearg` modify function arguments, making the order in which they are\r\n * executed important, preventing the merging of metadata. However, we make\r\n * an exception for a safe combined case where curried functions have `_.ary`\r\n * and or `_.rearg` applied.\r\n *\r\n * @private\r\n * @param {Array} data The destination metadata.\r\n * @param {Array} source The source metadata.\r\n * @returns {Array} Returns `data`.\r\n */\r\nfunction mergeData(data, source) {\r\n  var bitmask = data[1],\r\n      srcBitmask = source[1],\r\n      newBitmask = bitmask | srcBitmask,\r\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\r\n\r\n  var isCombo =\r\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\r\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\r\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\r\n\r\n  // Exit early if metadata can't be merged.\r\n  if (!(isCommon || isCombo)) {\r\n    return data;\r\n  }\r\n  // Use source `thisArg` if available.\r\n  if (srcBitmask & WRAP_BIND_FLAG) {\r\n    data[2] = source[2];\r\n    // Set when currying a bound function.\r\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\r\n  }\r\n  // Compose partial arguments.\r\n  var value = source[3];\r\n  if (value) {\r\n    var partials = data[3];\r\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\r\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\r\n  }\r\n  // Compose partial right arguments.\r\n  value = source[5];\r\n  if (value) {\r\n    partials = data[5];\r\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\r\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\r\n  }\r\n  // Use source `argPos` if available.\r\n  value = source[7];\r\n  if (value) {\r\n    data[7] = value;\r\n  }\r\n  // Use source `ary` if it's smaller.\r\n  if (srcBitmask & WRAP_ARY_FLAG) {\r\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\r\n  }\r\n  // Use source `arity` if one is not provided.\r\n  if (data[9] == null) {\r\n    data[9] = source[9];\r\n  }\r\n  // Use source `func` and merge bitmasks.\r\n  data[0] = source[0];\r\n  data[1] = newBitmask;\r\n\r\n  return data;\r\n}\r\n\r\nmodule.exports = mergeData;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/_mergeData.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/lodash/_mergeData.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}}],"sources":{"node_modules/lodash/_mergeData.js":"var composeArgs = require('./_composeArgs'),\r\n    composeArgsRight = require('./_composeArgsRight'),\r\n    replaceHolders = require('./_replaceHolders');\r\n\r\n/** Used as the internal argument placeholder. */\r\nvar PLACEHOLDER = '__lodash_placeholder__';\r\n\r\n/** Used to compose bitmasks for function metadata. */\r\nvar WRAP_BIND_FLAG = 1,\r\n    WRAP_BIND_KEY_FLAG = 2,\r\n    WRAP_CURRY_BOUND_FLAG = 4,\r\n    WRAP_CURRY_FLAG = 8,\r\n    WRAP_ARY_FLAG = 128,\r\n    WRAP_REARG_FLAG = 256;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMin = Math.min;\r\n\r\n/**\r\n * Merges the function metadata of `source` into `data`.\r\n *\r\n * Merging metadata reduces the number of wrappers used to invoke a function.\r\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\r\n * may be applied regardless of execution order. Methods like `_.ary` and\r\n * `_.rearg` modify function arguments, making the order in which they are\r\n * executed important, preventing the merging of metadata. However, we make\r\n * an exception for a safe combined case where curried functions have `_.ary`\r\n * and or `_.rearg` applied.\r\n *\r\n * @private\r\n * @param {Array} data The destination metadata.\r\n * @param {Array} source The source metadata.\r\n * @returns {Array} Returns `data`.\r\n */\r\nfunction mergeData(data, source) {\r\n  var bitmask = data[1],\r\n      srcBitmask = source[1],\r\n      newBitmask = bitmask | srcBitmask,\r\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\r\n\r\n  var isCombo =\r\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\r\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\r\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\r\n\r\n  // Exit early if metadata can't be merged.\r\n  if (!(isCommon || isCombo)) {\r\n    return data;\r\n  }\r\n  // Use source `thisArg` if available.\r\n  if (srcBitmask & WRAP_BIND_FLAG) {\r\n    data[2] = source[2];\r\n    // Set when currying a bound function.\r\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\r\n  }\r\n  // Compose partial arguments.\r\n  var value = source[3];\r\n  if (value) {\r\n    var partials = data[3];\r\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\r\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\r\n  }\r\n  // Compose partial right arguments.\r\n  value = source[5];\r\n  if (value) {\r\n    partials = data[5];\r\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\r\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\r\n  }\r\n  // Use source `argPos` if available.\r\n  value = source[7];\r\n  if (value) {\r\n    data[7] = value;\r\n  }\r\n  // Use source `ary` if it's smaller.\r\n  if (srcBitmask & WRAP_ARY_FLAG) {\r\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\r\n  }\r\n  // Use source `arity` if one is not provided.\r\n  if (data[9] == null) {\r\n    data[9] = source[9];\r\n  }\r\n  // Use source `func` and merge bitmasks.\r\n  data[0] = source[0];\r\n  data[1] = newBitmask;\r\n\r\n  return data;\r\n}\r\n\r\nmodule.exports = mergeData;\r\n"},"lineCount":91}},"error":null,"hash":"36c1f22ea3f1e81c42707ef1c3184f24","cacheData":{"env":{}}}